//读取cookie中是否有缓存的定位信息
var cookie = require("../cookie");
var config = require("../config");


var cookieNames = config.get("cookieNames");
var cacheType = config.get("cacheType");
var storageKey = config.get("storageName");
var disables = config.get("disables");
var cLat = cookieNames[0];
var cLng = cookieNames[1];
var cCity = cookieNames[2];
var cType = 'geoType';


var cacheTime = 15; //分钟

//  缓存在内存中
var positionMemory = {};

var supportLocalStorage = function() {
  //iphone safari 无痕模式下设置localstorage时候会抛异常

  var support = window.localStorage && window.localStorage != null;
  var testKey = 'local_test';
  if (support) {
    try {
      localStorage.setItem(testKey, 1);
      localStorage.removeItem(testKey);
    } catch (e) {
      return false;
    }
  }
  return support;
};

var extend = function(target, source) {
  for (var key in source) {
    target[key] = source[key]
  }
  return target
}

module.exports = function(suc, fail, next) {

  cacheType = config.get("cacheType");
  disables = config.get("disables");

  if (!cacheType) {
    //不走缓存
    next();
  } else if (disables && disables.indexOf('cache') !== -1) {
    next();
  } else {
    if (positionMemory && positionMemory.lat & positionMemory.lng) {
      suc(positionMemory)
    } else {
      var positionCache;
      //首先从storage中拿
      if (!supportLocalStorage()) {
        next()
      } else {
        storageKey = config.get("storageName");

        var cached = localStorage.getItem(storageKey);
        if (cached) {
          var jsonInfo = {};
          try {
            jsonInfo = JSON.parse(cached);
            jsonInfo.city = JSON.parse(jsonInfo.city)
          } catch (e) {
            console.log('Parse position fail', e);
          }
          var t = jsonInfo.time;
          var lat = +jsonInfo.lat;
          var lng = +jsonInfo.lng;
          var type = +jsonInfo.type;
          var city = jsonInfo.city;

          if (+new Date() - t > cacheTime * 60 * 1000 || !lat || !lng) {
            localStorage.removeItem(storageKey);
          } else {
            positionCache = {
              geoType: type,
              lat: lat,
              lng: lng,
              city: city
            }
          }
        }

        if (cacheType == "cookie") {
          cookieNames = config.get("cookieNames");
          cLat = cookieNames[0];
          cLng = cookieNames[1];

          var cookieLat = cookie(cLat);
          var cookieLng = cookie(cLng);
          var cookieType = cookie(cType);

          if (cookieLat && cookieLng) {
            if (positionCache && cookieLat == positionCache.lat && cookieLng == positionCache.lng) {
              suc(positionCache)
            }else{
              suc({
                geoType: cookieType,
                lat: cookieLat,
                lng: cookieLng
              });              
            }
          } else {
            next();
          }
        }else if (cacheType == "storage") {
          if (positionCache && positionCache.lat && positionCache.lng) {
            suc(positionCache)
          }else{
            next()
          }
        }else{
          next()
        }
      }
    }
  }
};

module.exports.type = "cache";

module.exports.set = function(position) {
  position = position || {}

  var positionCache

  extend(positionMemory, position)

  cacheType = config.get("cacheType");
  disables = config.get("disables");

  if (!cacheType) {
    return;
  }
  //  如何数据来自缓存或禁止使用缓存
  if (position.type === "cache" || (disables && disables.indexOf("cache") !== -1)) {
    return;
  }

  if (position.city) {
    // 城市信息不走cookie
    if (!supportLocalStorage()) {
      return;
    }
    positionMemory.city = position.city
    positionCache = extend({}, positionMemory)
    positionCache.city = JSON.stringify(position.city)

    storageKey = config.get("storageName");
    localStorage.setItem(storageKey, JSON.stringify(positionCache));

  } else if (position.lat && position.lng) {
    if (cacheType == "cookie") {
      var opt = {
        expires: cacheTime / 60 / 24, // 15min
        path: '/'
      };
      if (~location.hostname.indexOf("51ping.com")) {
        opt.domain = ".51ping.com";
      } else if (~location.hostname.indexOf("dianping.com")) {
        opt.domain = ".dianping.com";
      }

      cookieNames = config.get("cookieNames");
      cLat = cookieNames[0];
      cLng = cookieNames[1];
      cCity = cookieNames[2];

      if (position.lat && position.lng) {
        cookie(cLat, position.lat, opt);
        cookie(cLng, position.lng, opt);
        cookie(cType, position.geoType, opt);
      }

    } else if (cacheType == "storage") {
      if (!supportLocalStorage()) {
        return;
      }

      positionCache = positionMemory = extend({}, position)
      positionCache.time = +new Date()

      storageKey = config.get("storageName");
      localStorage.setItem(storageKey, JSON.stringify(positionCache));
    }
  }

};
