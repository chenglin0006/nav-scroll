/**
 * 通过http请求的方式获取Lion配置
 *
 * 主要用于命令行工具, CI等 需要读取配置的非 web项目
 * */


var request = require("request");
var fs = require("fs");
var path = require('path');

const ENVS = ['dev', 'alpha', 'qa', 'prelease', 'product', 'performance'];

const ENV_ALIAS = {
    "beta": "qa",
    "ppe": "prelease"
};

const REMOTE_PATTERN = "http://lionapi.dp:8080/config2/get?env={env}&id=2&key={key}";


exports.getProperty = function (key, env, defaultValue) {

    return new Promise(function (resolve, reject) {
        //check
        if (!key) {
            return reject(new Error("key required"));
        }
        if (env && env in ENV_ALIAS) {
            env = ENV_ALIAS[env];
        }

        if (!env || !~ENVS.indexOf(env)) {
            return reject(new Error("env should be one of [" + ENVS.join(',') + "]"));
        }

        if (arguments.length == 2) {
            defaultValue = null;
        }

        var url = REMOTE_PATTERN.replace("{env}", env).replace("{key}", key);
        request(url, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                var json = null;
                try {
                    json = JSON.parse(body);
                } catch (err) {
                    return reject(new Error("LION API : result parse error " + err));
                }
                if (json && json.status == "success") {
                    return resolve(json.result);
                } else {
                    return reject(new Error("LION API: remote error " + (json ? json.message : "")));
                }
            }

            if (error) {
                return reject(new Error(error));
            } else {
                return reject(new Error("LION API: statusCode " + response.statusCode));
            }
        });
    });
};