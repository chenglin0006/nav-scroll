var npm = require('npm');
var PACKAGE_JSON = './package.json';
var F2ECI_JSON = './f2eci.json';
var SCHEMA_JSON = './schema.json';
var SLOT_JSON = './slot.json';
var path = require('path');
var CWD = process.cwd();
var semver = require('semver');
var Promise = require('promise');
var fs = require('fs');
var env = require(path.join(CWD, F2ECI_JSON)).env;
var pkgConfig = require(path.join(CWD, PACKAGE_JSON));
//var schemaConfig = require(path.join(CWD, SCHEMA_JSON));
var urlPrefix = require(path.join(CWD, F2ECI_JSON)).urlPrefix;
var request = require('request');
var qs = require('querystring');
var _ = require('underscore');
//var jsdom = require('jsdom');
var htmlDir = require(path.join(CWD, F2ECI_JSON)).output;
//var SchemaGenerator = require('rainbow-schema-generator');
var co = require("co");
// var updateGenerator = require("@dp/node-module-update");

module.exports = {
  register: function(){
    console.log('Function Deprecated')

    // var registerUrl = "http://gmkt.activ.51ping.com/component/preserveNewA";
    // switch(env){
    //   case 'beta':
    //     registerUrl = "http://gmkt.activ.51ping.com/component/preserveNewA";
    //     break;
    //   case 'ppe':
    //     registerUrl = "http://ppegmkt.activ.dianping.com/component/preserveNewA";
    //     break;
    //   case 'product':
    //     registerUrl = "http://gmkt.activ.dianping.com/component/preserveNewA";
    //     break;
    //   default:
    //     registerUrl = "http://gmkt.activ.51ping.com/component/preserveNewA";
    //     break;
    // }
    // console.log('Start registration...');
    // function registerDb(){
    //   request({
    //       url : registerUrl,
    //       qs : {
    //         title: schemaConfig.title,
    //         name: pkgConfig.name,
    //         config: JSON.stringify(schemaConfig),
    //         slotConfig: JSON.stringify(require(path.join(CWD, SLOT_JSON))),
    //         samplePic: urlPrefix,
    //         callback: Date.now()
    //       }
    //     }, function (error, response, body) {
    //       if(error){
    //         throw new Error(error);
    //       }
    //
    //       var result = JSON.parse(body);
    //       console.log(result.msg);
    //     });
    // }
    // registerDb();
    //
    // // co(function* (){
    // //     let fn = yield updateGenerator(env || "beta");
    // //     fn({name:pkgConfig.name});
    // // });

  },
  version : function(_type){
    var type = _type || 'patch';
    npm.load(pkgConfig, function(){
      console.log('The latest version is')
      npm.commands.view([pkgConfig.name, "version"],function(err, data){
        var latestVer = '';
        var newVer = '';
        if(err){
          latestVer = pkgConfig.version;
        }else{
          latestVer = Object.keys(data)[0] || pkgConfig.version;
          if(semver.gt(pkgConfig.version, latestVer)){
            latestVer = pkgConfig.version;
          }
        }
        newVer = (env != "product" ) ? semver.inc(latestVer, 'prerelease', env) : semver.inc(latestVer, type);
        console.log('New version is',newVer);
        pkgConfig.version = newVer;
        fs.writeFile(path.join(CWD, PACKAGE_JSON), JSON.stringify(pkgConfig, null, 4), function(err){
          if(err) throw err;
          console.log('Version update successfully');
        });
      });
    })
  },
  schema: function(){
    console.error('Function Deprecated');
    // return new Promise(function(resolve, rejecte){
    //   jsdom.env(path.join(htmlDir,'/index.html'), function(v, window){
    //     if(v) throw v;
    //     var configNodes = window.document.querySelectorAll('[:config]');
    //     [].forEach.call(configNodes, function(item){
    //       var config = JSON.parse(item.getAttribute(':config'));
    //       if(item.tagName == 'app' || item.tagName == 'APP'){
    //         var slots = item.children;
    //         var slotNames = {};
    //         [].forEach.call(slots,function(slotItem){
    //           var slotName = slotItem.getAttribute("slot");
    //           if(slotName){
    //             slotNames[slotName] = {};
    //           }else{
    //             slotNames['__default'] = {};
    //           }
    //         });
    //         console.log('Generating schema...')
    //         var schema = _.extend(SchemaGenerator(config),schemaConfig);
    //         fs.writeFile(path.join(CWD, SCHEMA_JSON),JSON.stringify(schema, null, 4), function(err){
    //           console.log('Generating slots...')
    //           if(err) throw err;
    //           fs.writeFile(path.join(CWD, SLOT_JSON),JSON.stringify(slotNames, null, 4), function(err){
    //             if(err) throw err;
    //             resolve();
    //             console.log('Slots completed.')
    //           });
    //           console.log('Schema completed.')
    //         });
    //       }
    //     })
    //   })
    // })
  }


}
