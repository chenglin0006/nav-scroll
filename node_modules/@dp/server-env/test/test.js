/**
 * Test env
 * */

const assert = require("assert");
const fs = require("fs");
const S = require("../index");
const getServerProp = S.getServerProperties;


const FIRST_ENV_PATH = '/data/webapps/paas/ROOT/appenv';
const BAK_FIRST_ENV_PATH = FIRST_ENV_PATH + (+new Date());
const ENV_PATH = '/data/webapps/appenv';
const BAK_ENV_PATH = ENV_PATH + (+new Date());

describe("server-env", () => {
    describe("#getServerProperties", ()=> {

        before(()=> {
            if (fs.existsSync(FIRST_ENV_PATH)) {
                fs.renameSync(FIRST_ENV_PATH, BAK_FIRST_ENV_PATH);
            }
            if (fs.existsSync(ENV_PATH)) {
                fs.renameSync(ENV_PATH, BAK_ENV_PATH);
            }
        });

        beforeEach(()=> {
            S._clear();
        });


        it("should return the object ", () => {
            assert.deepEqual(getServerProp(), {});
        });

        it("should return the object ", () => {
            fs.writeFileSync(ENV_PATH, 'env=qa');
            assert.deepEqual(getServerProp(), {env: "qa"});
        });

        after(()=> {
            if (fs.existsSync(BAK_FIRST_ENV_PATH)) {
                fs.unlinkSync(FIRST_ENV_PATH);
                fs.renameSync(BAK_FIRST_ENV_PATH, FIRST_ENV_PATH);
            }
            if (fs.existsSync(BAK_ENV_PATH)) {
                fs.unlinkSync(ENV_PATH);
                fs.renameSync(BAK_ENV_PATH, ENV_PATH);
            }
        });

    });
});