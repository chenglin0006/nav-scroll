#!/usr/bin/env node

let Log = require("@dp/log");
let net = require("net");
let CT = require('./util/ct');
let Co = require("co");
let Lion = require("@dp/lion-client");
let router = require("./util/router");
let path = require("path");
let Ayalysis = require("./util/analysis");
let ayalysis = new Ayalysis();

const STATUS = require("./util/status");
const SERVER_ROUTER_PATH = require("./server/path");


Co(function* (){
    let config = yield Lion.httpGetProperty(CT.HOST_LION_CONFIG, CT.ENV);
    return JSON.parse(config);
}).then((result)=>{
	//server创建
   
    let server = net.createServer({
    },(client)=> {

            client.setEncoding('utf8');
            /*
                链接数
             */
            server.getConnections((err, count)=>{
                Log.success(`server connected\nconnect number:${count}`);
            })

            /*
            	核心方式处理
             */
            client.on('data', function(data){
                ayalysis.push(data).get().forEach((cmd)=> {
                    router.accept(cmd).forEach((it) => {
                        if(it.code == STATUS.SUCCESS){
                            try{
                                require("."+path.join(CT.SERVER_HANDLER_PATH,it.path)).call(server,client,it.data);
                            }catch(e){
                                require("."+path.join(CT.SERVER_HANDLER_PATH,SERVER_ROUTER_PATH.OTHER)).call(server,client,JSON.stringify(it));
                            }
                        }
                    });
                });
            });
        /**
         * 错误监听
         * @param  {[type]} 'error' [description]
         * @param  {[type]} (e)     [description]
         * @param  {[type]} (       [description]
         * @return {[type]}         [description]
         */
        }).on('error',(e)=>{
        	Log.info(e);
        	// 重启
        	setTimeout(()=>{startFn()},5000);
        }).on('data',(data)=>{
        	Log.success(data);
        });
    
    let startFn = require("./server/start")(server,result.port);
    /**
     * 启动
     */
    startFn();
});

