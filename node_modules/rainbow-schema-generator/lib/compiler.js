'use strict';

var utils = require('./utils');
var path = require('path');
var CWD = process.cwd();
var PACKAGE_JSON = './package.json';
var SCHEMA_JSON = './schema.json';
var packageConfig = require(path.join(CWD,PACKAGE_JSON));
var schemaConfig = require(path.join(CWD,SCHEMA_JSON));
var DEFAULT_TITLE = "请输入{key}的标题"
var DEFAULT_DESCRIPTION = "请输入{key}的描述"
var _ = require('underscore');
/**
Schema generator using a AST
tree.

@class Compiler
*/
var Compiler = function() {
  if (!this instanceof Compiler) {
    return new Compiler();
  }

  this.schema = {};
};

/**
Generates a JSON schema based on the provided AST tree.

@method generate
@param {Object} tree AST
@param {Object} schema The schema object
@param {Object} parent Schema node parent object
@return void
*/
Compiler.prototype.generate = function(tree, schema, parent, originSchema) {
  for (var i in tree.children) {
    var child = tree.children[i];
    if (child.type === 'object') {
      if (utils.isArray(parent.required)) {
        parent.required.push(i);
      }
      originSchema[i].required && (originSchema[i].required = []);
      schema[i] = _.extend({
        type: 'object'
        ,title: DEFAULT_TITLE.replace('{key}',i)
        ,description: DEFAULT_DESCRIPTION.replace('{key}',i)
        ,properties: {}
        ,required: []
      }, originSchema[i]);
      this.generate(child, schema[i].properties, schema[i], originSchema[i] ? originSchema[i].properties: null);
    } else if (child.type === 'array') {
      if (utils.isArray(parent.required)) {
        parent.required.push(i);
      }
      originSchema[i] && originSchema[i].items && originSchema[i].items.required && (originSchema[i].items.required = []);
      schema[i] = _.extend({
        type: 'array'
        ,uniqueItems: child.uniqueItems
        ,minItems: child.minItems
        ,title: DEFAULT_TITLE.replace('{key}',i)
        ,description: DEFAULT_DESCRIPTION.replace('{key}',i)
        ,items: _.extend({
          required:[]
          ,properties: {}
        }, originSchema[i] ? originSchema[i].items: null)
      }, originSchema[i]);
      this.generate(child, schema[i].items.properties, schema[i], (originSchema[i] && originSchema[i].items) ? originSchema[i].items.properties: null);
    } else {
      schema[i] = _.extend({
        title: DEFAULT_TITLE.replace('{key}',i)
        ,description: DEFAULT_DESCRIPTION.replace('{key}',i)
      }, originSchema[i]);
      if (child.type) {
        schema[i].type = child.type;
      }

      if (child.minLength) {
        schema[i].minLength = child.minLength;
      }

      if (child.required) {
        if (parent.items && utils.isArray(parent.items.required)) {
          parent.items.required.push(i);
        } else {
          parent.required.push(i);
        }
      }
    }
  }
};

/**
Initates compiling the given AST into a
JSON schema.

@method compile
@param {Object} tree AST object
@return void
*/
Compiler.prototype.compile = function(tree) {
  if (tree.type === 'object') {
  schemaConfig.required && (schemaConfig.required = []);
   this.schema = _.extend({
    '$schema': 'http://json-schema.org/draft-04/schema#'
    ,title:DEFAULT_TITLE.replace('{key}',packageConfig.name)
    ,description: DEFAULT_DESCRIPTION.replace('{key}',packageConfig.name)
    ,type: 'object'
    ,properties: {}
    ,required: []
  }, schemaConfig);
   this.generate(tree, this.schema.properties, this.schema, schemaConfig.properties);
  } else {
    schemaConfig.items && schemaConfig.items.required && (schemaConfig.items.required = []);
    this.schema = _.extend({
      type: 'array'
      ,'$schema': 'http://json-schema.org/draft-04/schema#'
      ,title:DEFAULT_TITLE.replace('{key}',packageConfig.name)
      ,description: DEFAULT_DESCRIPTION.replace('{key}',packageConfig.name)
      ,minItems: 1
      ,uniqueItems: true
      ,items: {
        type: 'object'
        ,required: []
        ,properties: {}
      }
    }, schemaConfig);

    this.generate(tree, this.schema.items.properties, this.schema.items, schemaConfig.items ? schemaConfig.items.properties : null);
  }
};

module.exports = Compiler;
