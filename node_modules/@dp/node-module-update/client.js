"use strict";

let Log = require("@dp/log");
let net = require("net");
let CT = require('./util/ct');
let Co = require("co");
let Lion = require("@dp/lion-client");
let router = require("./util/router");
let path = require("path");
let Ayalysis = require("./util/analysis");
let ayalysis = new Ayalysis();
const STATUS = require("./util/status");
const CLIENT_ROUTER_PATH = require("./client/path");
const ENV_MATCH = {
	"alpha":"beta",
	"beta":"beta",
	"ppe":"beta",
	"product":"product"
}


module.exports = function* (env){
	let hostConfig = yield Lion.httpGetProperty(CT.HOST_LION_CONFIG, ENV_MATCH[env] || CT.ENV || "beta");
	let hostConfigObj = JSON.parse(hostConfig);
	

	let client = net.connect({
		host:hostConfigObj.host,
		port:hostConfigObj.port
	}, ()=>{
	    Log.success('client connected');
	});

	yield new Promise((resolve)=>{
		/**
		 * 超时摧毁
		 * @param  {[type]} 10分钟 [description]
		 * @param  {[type]} (    [description]
		 * @return {[type]}      [description]
		 */
		client.setTimeout(600000,()=>{
			client.destroy();
		});

		client.on("connect",()=>{
			resolve();
		});
	});

	client.on('data', function(data) {
		/**
		 * 核心处理
		 */
		ayalysis.push(data).get().forEach((cmd)=> {
			router.accept(cmd).forEach((it) => {
				if(it.code == STATUS.SUCCESS){
					try {
						require("." + path.join(CT.CLIENT_HANDLER_PATH, it.path)).call(client, client, it.data);
					} catch (e) {
						require("." + path.join(CT.CLIENT_HANDLER_PATH, CLIENT_ROUTER_PATH.OTHER)).call(client, client, it.path);
					}
				}
			});
		});
    	
	});
	client.on('end', function() {
	    Log.error('client disconnected');
	});

	return function(module){

		if(!module.name){
			Log.error("模块名不能为空");
		};

		Log.info(`开始更新组件:${JSON.stringify(module.name)}`)
		client.write(router.send("update",{
			module:module
		}));
	}
}


