/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);
/******/
/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;
/******/
/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".build.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./test/dist";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _stringify = __webpack_require__(2);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _index = __webpack_require__(5);
	
	var _index2 = _interopRequireDefault(_index);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(0, _index2.default)(function (config) {
		alert((0, _stringify2.default)(config));
	});
	(0, _index2.default)(function (config) {
		alert("2:" + (0, _stringify2.default)(config));
	});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(3), __esModule: true };

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(4)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Whereami = __webpack_require__(6);
	var ua = __webpack_require__(65)();
	var fetchJsonp = __webpack_require__(66);
	var Ur = __webpack_require__(67);
	
	var middleIp = {
		cache: false,
		cbQueue: [],
		push: function push(cb) {
			var self = this;
			self.cbQueue.push(cb);
			self.fetch();
	
			self.push = function (_cb) {
				self.cbQueue.push(_cb);
				if (self.cache) self.action();
			};
		},
		fetch: function fetch() {
			var self = this;
			getCityIdByIp(function (data) {
				self.cache = data;
				self.lock = true;
				self.action();
			});
		},
		action: function action() {
			var self = this;
			var cb;
			while (cb = self.cbQueue.shift()) {
				cb(self.cache);
			}
		}
	};
	
	function getCityIdByIp(cb) {
		fetchJsonp(Ur("//promo.dianping.com/mtlist/getIpInfo.jsonp")).then(function (response) {
			try {
				return response.json();
			} catch (e) {}
		}).then(function (res) {
			if (res.code == 200) {
				cb({
					cityId: res.data
				});
			} else {
				cb({
					cityId: ""
				});
			}
		});
	}
	
	function _action(city, cb) {
		city = city || {};
		Whereami(function (res) {
			var config = {
				lng: res.lng,
				lat: res.lat
			};
			if (city.cityId) {
				config.cityId = city.cityId;
			} else {
				config.cityId = res.city && res.city.cityid || "";
			}
			cb(config);
		}, function () {
			var timer = false;
			if (city.type) {
				cb({
					cityId: city.cityId
				});
			} else {
				middleIp.push(function (data) {
					!timer && cb(data);
					timer = true;
				});
				setTimeout(function () {
					!timer && cb({
						cityId: ""
					});
					timer = true;
				}, 2500);
			}
		});
	}
	module.exports = function (cb, env, options) {
		env = env || ua.source;
	
		var config = {
			timeout: 3000,
			city: true,
			cityType: env,
			wxAutoConfig: ua.type == "weixin" ? true : false
		};
		options = options || {};
		if (options.useTecentGeo) {
			config.useTecentGeo = true;
		}
	
		Whereami.config(config);
	
		if (ua.type == "mtgroup") {
			__webpack_require__.e/* nsure */(3, function (require) {
				var KNB = __webpack_require__(68);
				KNB.ready(function () {
					var _lockGetCity = false;
					var _timerGetCity = setTimeout(function () {
						if (!_lockGetCity) {
							_action({}, cb);
							_lockGetCity = true;
						}
					}, 2500);
					KNB.getCity({
						success: function success(city) {
							if (!_lockGetCity) {
								if (city && city.cityId == -1) {
									_action({}, cb);
								} else {
									_action(city, cb);
								}
							}
	
							_lockGetCity = true;
							clearTimeout(_timerGetCity);
						},
						fail: function fail(city) {
							!_lockGetCity && _action(city, cb);
							_lockGetCity = true;
							clearTimeout(_timerGetCity);
						}
					});
				});
			});
		} else if (ua.type == "dpapp") {
			__webpack_require__.e/* nsure */(2/* duplicate */, function (require) {
				var dpapp = __webpack_require__(20);
				dpapp.ready(function () {
					dpapp.getCity({
						success: function success(city) {
							_action(city, cb);
						},
						fail: function fail(city) {
							_action(city, cb);
						}
					});
				});
			});
		} else {
			_action({}, cb);
		}
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var config = __webpack_require__(7);
	var cache = __webpack_require__(8);
	var request = __webpack_require__(10);
	var log = __webpack_require__(11);
	
	var geos = [
	    __webpack_require__(12),
	    cache,
	    __webpack_require__(13),
	    __webpack_require__(15),
	    __webpack_require__(17),
	    __webpack_require__(18),
	    __webpack_require__(19),
	    __webpack_require__(63),
	    __webpack_require__(64)
	];
	var isSpider = function () {
	    return !!navigator.userAgent.match(/spider/i);
	};
	
	//成功和失败的回掉队列
	var sucCallbackQueue = [],
	    errorCallBackQueue = [];
	
	var isLocating = false; //是否正在定位
	
	function execute(queue, args) {
	    for (var i = 0, l = queue.length; i < l; i++) {
	        queue.shift().apply(this, args || []);
	    }
	}
	
	var urlDebug = ~location.href.indexOf("debug:whereami");
	
	
	module.exports = function (onSuc, onFail) {
	    /**
	     * 过滤掉爬虫，直接onFail
	     * */
	
	    if (isSpider()) {
	        onFail();
	        return;
	    }
	
	    /**
	     * 回调统统丢到队列里面,防止调用多次,触发多次调用底层接口
	     * */
	
	    onSuc && sucCallbackQueue.push(onSuc);
	    onFail && errorCallBackQueue.push(onFail);
	
	    if (isLocating) {
	        return;
	    }
	
	    isLocating = true;
	    var isTimeout = false;
	    var timer;
	    var timeout = config.get("timeout");
	    var disables = config.get("disables");
	    var startTime = +new Date();
	    var geoMethodType;
	    var debug = urlDebug || config.get("debug");
	
	    var getPositionSuccess = function (position) {
	        clearTimeout(timer);
	        isLocating = false;
	
	        if (position && position.lat && position.lng) {
	            log(startTime, geoMethodType, true);
	            //先设置cache , 即使是在主动超时的场景下
	            cache.set(position);
	        }
	
	        if (isTimeout) {
	            return;
	        }
	
	        if (!position || !position.lat || !position.lng || position.lat == "0" || position.lng == "0") {
	            return getPositionError();
	        }
	        if (debug) {
	            alert(JSON.stringify(position));
	        }
	
	        if (config.get("city") && position && !position.city ) {
	            //调用接口获取City信息
	            if (config.get("cityType") === 'meituan' || ~location.href.indexOf('.meituan.com')) {
	                var url
	                if (location.protocol === 'https:') {
	                    url = 'https://apimobile.meituan.com/group/v1/city/latlng/'
	                }else {
	                    url = 'http://api.mobile.meituan.com/group/v1/city/latlng/'
	                }
	                request({
	                    url: url+ position.lat+","+position.lng,
	                    data: {
	                        tag: 0
	                    },
	                    onSuc: function(res) {
	                        if (res && res.data) {
	                            var data = res.data;
	                            var city = {
	                                cityid: data.id,
	                                cityname: data.city
	                            };
	                            position.city = city;   
	
	                            cache.set({city: city});                     
	                        }
	                        execute(sucCallbackQueue,[
	                            position
	                        ]);
	                    }
	                })
	            }else{
	                request({
	                    url: "//m.dianping.com/getlocalcityid",
	                    data: {
	                        lat: position.lat,
	                        lng: position.lng
	                    },
	                    onSuc: function (res) {
	                        if (res.code == 200 && res.message) {
	                            position.city = res.message;
	
	                            cache.set({city: position.city});
	                        }
	                        execute(sucCallbackQueue, [
	                            position
	                        ]);
	                    }
	                });                
	            }
	
	        } else {
	            execute(sucCallbackQueue, [
	                position
	            ]);
	        }
	
	
	    };
	    var getPositionError = function () {
	        clearTimeout(timer);
	        isLocating = false;
	        log(startTime, geoMethodType, false);
	        log.logError(geoMethodType, JSON.stringify(Array.prototype.slice.call(arguments, 0)));
	        if (isTimeout) {
	            return;
	        }
	        execute(errorCallBackQueue);
	//        if (e && e.code) {
	//            switch (e.code) {
	//                case 1:
	//                    //用户拒绝
	//                    break;
	//                case 2:
	//                case 3:
	//                    //定位失败
	//                    break;
	//            }
	//        }
	
	    };
	
	    if (timeout) {
	        timer = setTimeout(function () {
	            //超时
	            isTimeout = true;
	            isLocating = false;
	            execute(errorCallBackQueue);
	        }, timeout);
	    }
	
	    //依次call各个定位
	    var current = -1;
	    (function next() {
	        current++;
	        if (geos[current]) {
	            geoMethodType = geos[current].type;
	
	            if (disables && ~disables.indexOf(geoMethodType)) {
	                next();
	            } else {
	                if (debug) {
	                    alert("start geos:" + geoMethodType);
	                }
	                geos[current](function (res) {
	                    res.type = geoMethodType;
	                    if (!res.geoType) {
	                        res.geoType = 'wgs84';
	                    }
	                    getPositionSuccess(res);
	                }, getPositionError, next);
	            }
	        } else {
	            //一个都没成功
	            getPositionError({
	                message: "no geo support"
	            });
	        }
	    })();
	
	};
	
	module.exports.config = config.config;
	
	module.exports.init = function () {
	    config.config({
	        wxAutoConfig: true
	    });
	    module.exports(function (res) {
	        console.log(res);
	    }, function () {
	        console.log("fail")
	    })
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	var config = {
	//    bizName: "default",
	    timeout: 10000,
	    source: '',
	    enables: [],
	    disables: [],
	    urlParamNames: ["latitude", "longitude"],
	    cacheType: "cookie", //storage , false不缓存
	    cookieNames: ["locallat", "locallng", "localcity"],
	    storageName: "whereami",
	    wxAutoConfig: false,
	    useTecentGeo: false,
	    city:false,     //是否要获取City信息
	    debug: false
	};
	
	
	exports.get = function (key) {
	    return config[key];
	};
	
	exports.set = function (key, value) {
	    config[key] = value;
	};
	
	exports.config = function (obj) {
	    Object.keys(obj).forEach(function (key) {
	        config[key] = obj[key];
	    });
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	//读取cookie中是否有缓存的定位信息
	var cookie = __webpack_require__(9);
	var config = __webpack_require__(7);
	
	
	var cookieNames = config.get("cookieNames");
	var cacheType = config.get("cacheType");
	var storageKey = config.get("storageName");
	var disables = config.get("disables");
	var cLat = cookieNames[0];
	var cLng = cookieNames[1];
	var cCity = cookieNames[2];
	var cType = 'geoType';
	
	
	var cacheTime = 15; //分钟
	
	//  缓存在内存中
	var positionMemory = {};
	
	var supportLocalStorage = function() {
	  //iphone safari 无痕模式下设置localstorage时候会抛异常
	
	  var support = window.localStorage && window.localStorage != null;
	  var testKey = 'local_test';
	  if (support) {
	    try {
	      localStorage.setItem(testKey, 1);
	      localStorage.removeItem(testKey);
	    } catch (e) {
	      return false;
	    }
	  }
	  return support;
	};
	
	var extend = function(target, source) {
	  for (var key in source) {
	    target[key] = source[key]
	  }
	  return target
	}
	
	module.exports = function(suc, fail, next) {
	
	  cacheType = config.get("cacheType");
	  disables = config.get("disables");
	
	  if (!cacheType) {
	    //不走缓存
	    next();
	  } else if (disables && disables.indexOf('cache') !== -1) {
	    next();
	  } else {
	    if (positionMemory && positionMemory.lat & positionMemory.lng) {
	      suc(positionMemory)
	    } else {
	      var positionCache;
	      //首先从storage中拿
	      if (!supportLocalStorage()) {
	        next()
	      } else {
	        storageKey = config.get("storageName");
	
	        var cached = localStorage.getItem(storageKey);
	        if (cached) {
	          var jsonInfo = {};
	          try {
	            jsonInfo = JSON.parse(cached);
	            jsonInfo.city = JSON.parse(jsonInfo.city)
	          } catch (e) {
	            console.log('Parse position fail', e);
	          }
	          var t = jsonInfo.time;
	          var lat = +jsonInfo.lat;
	          var lng = +jsonInfo.lng;
	          var type = +jsonInfo.type;
	          var city = jsonInfo.city;
	
	          if (+new Date() - t > cacheTime * 60 * 1000 || !lat || !lng) {
	            localStorage.removeItem(storageKey);
	          } else {
	            positionCache = {
	              geoType: type,
	              lat: lat,
	              lng: lng,
	              city: city
	            }
	          }
	        }
	
	        if (cacheType == "cookie") {
	          cookieNames = config.get("cookieNames");
	          cLat = cookieNames[0];
	          cLng = cookieNames[1];
	
	          var cookieLat = cookie(cLat);
	          var cookieLng = cookie(cLng);
	          var cookieType = cookie(cType);
	
	          if (cookieLat && cookieLng) {
	            if (positionCache && cookieLat == positionCache.lat && cookieLng == positionCache.lng) {
	              suc(positionCache)
	            }else{
	              suc({
	                geoType: cookieType,
	                lat: cookieLat,
	                lng: cookieLng
	              });              
	            }
	          } else {
	            next();
	          }
	        }else if (cacheType == "storage") {
	          if (positionCache && positionCache.lat && positionCache.lng) {
	            suc(positionCache)
	          }else{
	            next()
	          }
	        }else{
	          next()
	        }
	      }
	    }
	  }
	};
	
	module.exports.type = "cache";
	
	module.exports.set = function(position) {
	  position = position || {}
	
	  extend(positionMemory, position)
	
	  cacheType = config.get("cacheType");
	  disables = config.get("disables");
	
	  if (!cacheType) {
	    return;
	  }
	  //  如何数据来自缓存或禁止使用缓存
	  if (position.type === "cache" || (disables && disables.indexOf("cache") !== -1)) {
	    return;
	  }
	
	  if (position.city) {
	    // 城市信息不走cookie
	    if (!supportLocalStorage()) {
	      return;
	    }
	    positionMemory.city = JSON.stringify(position.city)
	
	    storageKey = config.get("storageName");
	    localStorage.setItem(storageKey, JSON.stringify(positionMemory));
	
	  } else if (position.lat && position.lng) {
	    if (cacheType == "cookie") {
	      var opt = {
	        expires: cacheTime / 60 / 24, // 15min
	        path: '/'
	      };
	      if (~location.hostname.indexOf("51ping.com")) {
	        opt.domain = ".51ping.com";
	      } else if (~location.hostname.indexOf("dianping.com")) {
	        opt.domain = ".dianping.com";
	      }
	
	      cookieNames = config.get("cookieNames");
	      cLat = cookieNames[0];
	      cLng = cookieNames[1];
	      cCity = cookieNames[2];
	
	      if (position.lat && position.lng) {
	        cookie(cLat, position.lat, opt);
	        cookie(cLng, position.lng, opt);
	        cookie(cType, position.geoType, opt);
	      }
	
	    } else if (cacheType == "storage") {
	      if (!supportLocalStorage()) {
	        return;
	      }
	
	      positionMemory = position
	      positionMemory.time = +new Date()
	
	      storageKey = config.get("storageName");
	      localStorage.setItem(storageKey, JSON.stringify(positionMemory));
	    }
	  }
	
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	/*!
	 * refer  jquery.cookie
	 * https://github.com/carhartl/jquery-cookie
	 *
	 */
	var isFunction = function(obj){
	    return Object.prototype.toString.call(obj) == '[object Function]';
	};
	var extend = function(obj){
	    Array.prototype.slice.call(arguments, 1).forEach(function(source){
	        if (source) {
	            for (var prop in source) {
	                obj[prop] = source[prop];
	            }
	        }
	    });
	    return obj;
	};
	
	
	var pluses = /\+/g;
	
	function encode(s) {
	    return config.raw ? s : encodeURIComponent(s);
	}
	
	function decode(s) {
	    return config.raw ? s : decodeURIComponent(s);
	}
	
	function stringifyCookieValue(value) {
	    return encode(config.json ? JSON.stringify(value) : String(value));
	}
	
	function parseCookieValue(s) {
	    if (s.indexOf('"') === 0) {
	        // This is a quoted cookie as according to RFC2068, unescape...
	        s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
	    }
	
	    try {
	        // Replace server-side written pluses with spaces.
	        // If we can't decode the cookie, ignore it, it's unusable.
	        // If we can't parse the cookie, ignore it, it's unusable.
	        s = decodeURIComponent(s.replace(pluses, ' '));
	        return config.json ? JSON.parse(s) : s;
	    } catch(e) {}
	}
	
	function read(s, converter) {
	    var value = config.raw ? s : parseCookieValue(s);
	    return isFunction(converter) ? converter(value) : value;
	}
	
	var cookie,config,removeCookie;
	
	config = cookie = function (key, value, options) {
	
	    // Write
	
	    if (value !== undefined && !isFunction(value)) {
	        options = extend({}, config.defaults, options);
	
	        if (typeof options.expires === 'number') {
	            var days = options.expires, t = options.expires = new Date();
	            t.setTime(+t + days * 864e+5);
	        }
	
	        return (document.cookie = [
	                encode(key), '=', stringifyCookieValue(value),
	                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
	                options.path    ? '; path=' + options.path : '',
	                options.domain  ? '; domain=' + options.domain : '',
	                options.secure  ? '; secure' : ''
	        ].join(''));
	    }
	
	    // Read
	
	    var result = key ? undefined : {};
	
	    // To prevent the for loop in the first place assign an empty array
	    // in case there are no cookies at all. Also prevents odd result when
	    // calling $.cookie().
	    var cookies = document.cookie ? document.cookie.split('; ') : [];
	
	    for (var i = 0, l = cookies.length; i < l; i++) {
	        var parts = cookies[i].split('=');
	        var name = decode(parts.shift());
	        var cookie = parts.join('=');
	
	        if (key && key === name) {
	            // If second argument (value) is a function it's a converter...
	            result = read(cookie, value);
	            break;
	        }
	
	        // Prevent storing a cookie that we couldn't decode.
	        if (!key && (cookie = read(cookie)) !== undefined) {
	            result[name] = cookie;
	        }
	    }
	
	    return result;
	};
	
	config.defaults = {};
	
	removeCookie = function (key, options) {
	    if (cookie(key) === undefined) {
	        return false;
	    }
	
	    // Must not alter options, thus extending a fresh object...
	    cookie(key, '', extend({}, options, { expires: -1 }));
	    return !cookie(key);
	};
	cookie.remove = removeCookie;
	module.exports = cookie;

/***/ },
/* 10 */
/***/ function(module, exports) {

	var globalCount = 0;
	
	var urlStringify = function (url, data) {
	    if (!data) {
	        return url;
	    }
	    var param = [];
	    for (var o in data) {
	        if (data.hasOwnProperty(o)) {
	            param.push(o + "=" + data[o]);
	        }
	    }
	    return ~url.indexOf("?") ? url +'&'+ param.join("&") : url + "?" + param.join("&");
	};
	
	/**
	 * jsonp
	 * */
	module.exports = function (options) {
	
	    if (!options.url) {
	        throw new Error("url request!");
	    }
	    var data = options.data || {};
	    var cb = options.onSuc || function () {
	    };
	    var cbName = data.callback = "WhereAmI" + (++globalCount) + (+new Date());
	
	    var script = document.createElement("script");
	    script.src = urlStringify(options.url, data);
	
	    window[cbName] = function (res) {
	        delete window[cbName];
	        script.parentNode.removeChild(script);
	        cb(res);
	    };
	
	    document.getElementsByTagName("head")[0].appendChild(script);
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * log to cat
	 * */
	
	var request = __webpack_require__(10);
	var config = __webpack_require__(7);
	
	module.exports = function (startTime, type, isSuccess) {
	    var source = config.get('source');
	
	    var tuAll = "whereami-type-all";
	    var tuType = "whereami-type-" + type;
	    if (source) {
	        tuAll += ('-'+source);
	        tuType += ('-'+source);
	    }
	    /**
	     * cat 监控
	     * http://cat.dianpingoa.com/cat/r/web?domain=cat&ip=All&date=2015080314&reportType=view&op=view
	     * whereami开头的分类中
	     * */
	    var catData = {
	        v: 1,
	        ts: +new Date(),
	        tu: tuAll,
	        d: (+new Date() - startTime),
	        hs: isSuccess ? 200 : 500,
	        ec: ""
	    };
	
	    //发送all 和 指定type的
	    send(catData);
	
	    catData.tu = tuType;
	
	    send(catData);
	
	};
	
	var send = function (catData) {
	    var catDataStr = [];
	    for (var o in catData) {
	        if (catData.hasOwnProperty(o)) {
	            catDataStr.push(o + "=" + catData[o]);
	        }
	    }
	    var img = new Image();
	    img.src = "//catdot.dianping.com/broker-service/api/single?" + catDataStr.join("&");
	};
	
	/**
	 * 手机详细错误日志，打到cat Event中
	 * */
	module.exports.logError = function (geoType, info) {
	    var host = (~location.href.indexOf("51ping.com") || ~location.href.indexOf("test.meituan.com")) ? "m.51ping.com" : "m.dianping.com";
	    request({
	        url: "//" + host + "/statictest/logevent",
	        data: {
	            name: "WhereAmIFail",
	            info: encodeURIComponent(geoType + "-" + info)
	        }
	    });
	
	    //no support UA
	    if(~info.indexOf("no geo support")){
	        request({
	            url: "//" + host + "/statictest/logevent",
	            data: {
	                name: "WhereAmIFailUA",
	                info: navigator.userAgent
	            }
	        });
	    }
	
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var config = __webpack_require__(7);
	
	var urlParamNames = config.get("urlParamNames");
	
	var pLat = urlParamNames[0];
	var pLng = urlParamNames[1];
	
	var latReg = new RegExp(pLat + "=([^$&]+)");
	var lngReg = new RegExp(pLng + "=([^$&]+)");
	
	module.exports = function (suc, fail, next) {
	    var query = location.search;
	    var latMatch = query.match(latReg);
	    var lngMatch = query.match(lngReg);
	
	    if (latMatch && lngMatch && !isNaN(latMatch[1]) && !isNaN(lngMatch[1])) {
	        suc({
	            lat: latMatch[1],
	            lng: lngMatch[1]
	        });
	    } else {
	        next();
	    }
	};
	
	module.exports.type = "url";

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	//腾讯X5浏览器定位，适合在android 微信和手Q环境下使用
	var util = __webpack_require__(14);
	var config = __webpack_require__(7);
	
	var useTecentGeo = function() {
	  return ~config.get('enables').indexOf('x5');
	};
	
	module.exports = function(suc, fail, next) {
	  if (!useTecentGeo()) {
	    next();
	  } else {
	
	    var done = false;
	
	    var geoIframeId = '_geoIframe_' + Math.ceil(Math.random() * 10000000);
	    var geoIframe = document.createElement('iframe');
	    var key = '6ULBZ-4X3C3-QEK3S-3ZRI6-6D7RE-WQFRQ';
	    var referer = '大众点评M站';
	    var src = location.protocol + '//apis.map.qq.com/tools/geolocation?key=' + key + '&referer=' + referer + '_js';
	    if (config.get('debug')) {
	      src +' &debug=1';
	    }
	    geoIframe.setAttribute('id', geoIframeId);
	    geoIframe.setAttribute('src', src);
	    geoIframe.setAttribute('style', 'display: none; width: 100%; height: 30%');
	    document.body.appendChild(geoIframe);
	
	    window.addEventListener('message', function(event) {
	      // 接收位置信息
	      var position = event.data;
	      if (!done) {
	        if (position) {
	          suc({
	            geoType: 'gcj02',
	            lat: position.lat,
	            lng: position.lng
	          })
	        } else {
	          next();
	        }
	      }
	    }, false);
	  }
	
	};
	
	
	module.exports.type = "x5";


/***/ },
/* 14 */
/***/ function(module, exports) {

	var cached = [];
	
	
	exports.loadScript = function (src, cb) {
	    if (~cached.indexOf(src)) {
	        cb();
	        return;
	    }
	
	    var script = document.createElement("script");
	    script.src = src;
	    script.onload = function () {
	        cached.push(src);
	        cb();
	    };
	    document.getElementsByTagName("head")[0].appendChild(script);
	};
	


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	//微信定位
	var config = __webpack_require__(7);
	var util = __webpack_require__(14);
	var urlDebug = ~location.href.indexOf("debug:whereami");
	
	var isInWeixin = function () {
	    return /MicroMessenger/.test(navigator.userAgent);
	};
	
	module.exports = function (suc, fail, next) {
	    if (!isInWeixin()) {
	        next();
	    } else {
	        var wxGeo = function () {
	            if (typeof wx === "undefined") {
	                next();
	                return;
	            }
	            wx.ready(function () {
	                wx.checkJsApi({
	                    jsApiList: ['getLocation'], // 需要检测的JS接口列表，所有JS接口列表见附录2,
	                    success: function (res) {
	                        // 以键值对的形式返回，可用的api值true，不可用为false
	                        // 如：{"checkResult":{"chooseImage":true},"errMsg":"checkJsApi:ok"}
	                        if (res.checkResult && res.checkResult.getLocation) {
	                            wx.getLocation({
	                                type: 'wgs84', // 默认为wgs84的gps坐标，如果要返回直接给openLocation用的火星坐标，可传入'gcj02'
	                                success: function (res) {
	                                    suc({
	                                        lat: res.latitude,
	                                        lng: res.longitude
	                                    });
	                                },
	                                fail: fail
	                            });
	                        } else {
	                            next();
	                        }
	                    },
	                    fail: next
	                });
	
	
	            });
	        };
	
	        if (config.get("wxAutoConfig") && typeof wx === "undefined") {
	            __webpack_require__.e/* nsure */(1, function (require) {
	                var loader = __webpack_require__(16);
	                loader.use(wxGeo);
	            });
	
	        } else {
	            wxGeo();
	        }
	    }
	};
	
	module.exports.type = "weixin";

/***/ },
/* 16 */,
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	//qq浏览器定位
	var util = __webpack_require__(14);
	
	var isInQQBrowser = function () {
	    return ~navigator.userAgent.indexOf("MQQBrowser");
	};
	
	module.exports = function (suc, fail, next) {
	    if (!isInQQBrowser()) {
	        next();
	    } else {
	
	        util.loadScript("http://jsapi.qq.com/get?api=app.getGeoLocation", function () {
	            try {
	                browser.app.getGeoLocation(function (res) {
	                    if (res.ret === "true") {
	                        suc({
	                            lat: res.latitude,
	                            lng: res.longitude
	                        });
	                    } else {
	                        fail.apply(this, Array.prototype.slice.call(arguments, 0));
	                    }
	                }, fail);
	            } catch (e) {
	                next();
	            }
	        });
	    }
	
	};
	
	
	module.exports.type = "qqbrowser";

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	//手Q定位API
	var util = __webpack_require__(14);
	
	var isInMobileQQ = function () {
	    return navigator.userAgent.match(/(.*?(iPad|iPhone|iPod).*?QQ\/([\d\.]+).*?)|(.*?\bV1_AND_SQI?_([\d\.]+)(.*?QQ\/([\d\.]+))?.*?)/i)
	};
	
	
	module.exports = function (suc, fail, next) {
	    if (!isInMobileQQ()) {
	        next();
	    } else {
	        util.loadScript("//open.mobile.qq.com/sdk/qqapi.js?_bid=152", function () {
	            if (!window.mqq || !window.mqq.sensor || !window.mqq.sensor.getLocation) {
	                next();
	            } else {
	                mqq.sensor.getLocation({
	                    allowCacheTime: 60
	                }, function (retCode, latitude, longitude) {
	                    if (retCode == 0 && latitude && longitude) {
	                        suc({
	                            lat: latitude,
	                            lng: longitude
	                        });
	
	                    } else {
	                        fail.apply(this, Array.prototype.slice.call(arguments, 0));
	                    }
	                });
	            }
	        });
	    }
	};
	
	module.exports.type = "mobileqq";

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	//主app js bridge定位
	var isInApp = function () {
	    return ~navigator.userAgent.indexOf("dianping");
	};
	
	
	module.exports = function (suc, fail, next) {
	    if (!isInApp()) {
	        next();
	    } else {
	        __webpack_require__.e/* nsure */(2, function (require) {
	            var dpapp = __webpack_require__(20);
	            dpapp.ready(function () {
	                dpapp.getLocation({
	                    success: function (e) {
	                        suc({
	                            lat: e.lat,
	                            lng: e.lng
	                        });
	                    },
	                    fail: fail
	                });
	            });
	        });
	    }
	
	
	};
	
	module.exports.type = "app";

/***/ },
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */
/***/ function(module, exports) {

	/**
	 * 美团App目前用URL参数来定位 , lat , lng
	 * */
	var latReg = new RegExp("lat=([^$&]+)");
	var lngReg = new RegExp("lng=([^$&]+)");
	
	var isInMeituan = function () {
	    //美团的ua不统一
	    return ~navigator.userAgent.indexOf("Meituan");
	};
	
	module.exports = function (suc, fail, next) {
	    //if (!isInMeituan()) {
	    //    next()
	    //} else {
	        var query = location.search;
	        var latMatch = query.match(latReg);
	        var lngMatch = query.match(lngReg);
	
	        if (latMatch && lngMatch && !isNaN(latMatch[1]) && !isNaN(lngMatch[1])) {
	            suc({
	                lat: latMatch[1],
	                lng: lngMatch[1]
	            });
	        } else {
	            next();
	        }
	    //}
	};
	
	module.exports.type = "meituan";

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	//正常浏览器定位api
	var config = __webpack_require__(7);
	
	var supportGeo = function () {
	    return !!navigator.geolocation;
	};
	
	
	module.exports = function (suc, fail, next) {
	    if (!supportGeo()) {
	        next();
	    } else {
	        navigator.geolocation.getCurrentPosition(function (crd) {
	            suc({
	                lat: crd.coords.latitude,
	                lng: crd.coords.longitude
	            });
	        }, function (e) {
	            if (e) {
	                fail({
	                    code: e.code,
	                    message: e.message
	                });
	            }else{
	                fail({
	                    message:"unknown error"
	                });
	            }
	        }, {
	            enableHighAccuracy: true,
	            maximumAge: 30000,
	            timeout: config.get("timeout") || 100000
	        });
	    }
	};
	
	module.exports.type = "html";

/***/ },
/* 65 */
/***/ function(module, exports) {

	var getUA = function(ua, url) {
	    var UA = ua || navigator.userAgent || navigator.vendor || window.opera;
	    var URL = url || location.href;
	    var result = {};
	    var type;
	    var version;
	    var os;
	    var osVersion;
	    var kernal;
	    var source;
	    var env
	
	    function match(reg) {
	        if (reg) {
	            if (UA.match(reg) && UA.match(reg).length) {
	                return UA.match(reg)[1];
	            }
	        }
	    }
	
	    function matchTypeVersion(reg) {
	        if (reg) {
	            if (UA.match(reg) && UA.match(reg).length >= 2) {
	                return UA.match(reg);
	            } else {
	                return ['', '0.0.0'];
	            }
	        }
	    }
	
	    function isMobile() {
	        var check = false;
	        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(UA) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(UA.substr(0, 4))) check = true 
	        return check;
	    }
	    
	
	    try {
	        //mobile detect
	        result.isMobile = isMobile();
	
	        //os detect
	        if (UA.match(/android/i)) {
	            result.os = 'android';
	
	            result.osVersion = match(/Android\/([\d\.]+)/i) || match(/Android ([\d\.]+)/);
	
	            result.kernal = match(/AppleWebKit\/([\d\.]+)/i);
	
	            result.browserVersion = match(/Chrome\/([\d\.]+)/i);
	        } else if (UA.match(/(ipad|iphone|ipod).*os\s([\d_]+)/i)) {
	            result.os = 'ios';
	
	            result.osVersion = match(/iOS\/([\d\.]+)/) || match(/OS ([\d\_]+)/).split('_').join('.');
	
	            result.kernal = match(/AppleWebKit\/([\d\.]+)/i);
	
	            result.browserVersion = match(/Safari\/([\d\.]+)/i);
	        }
	
	        //environment & version detect
	        if (/dp\/com\.dianping/.test(UA)) {
	            var arr = matchTypeVersion(/dp\/com\.dianping\.([\w\.]+)\/([\d\.]+)/);
	            var typeKey = arr[1];
	            version = arr[2];
	            if (typeKey.indexOf('dpscope') !== -1) {
	                type = 'dpapp';
	            } else if (typeKey.indexOf('v1') !== -1) {
	                type = 'dpapp'
	                if (/adapter\/([\d\.]+)/.test(UA)) {
	                    version = match(/adapter\/([\d\.]+)/);
	                }
	            } else if (typeKey.indexOf('merchant')) {
	                type = 'dpmerchant';
	            } else if (typeKey.indexOf('wed')) {
	                type = 'dpwed';
	            } else {
	                type = 'dp';
	            }
	
	        } else if (/MeituanGroup/i.test(UA)) {
	            type = 'mtgroup';
	
	            var arr = matchTypeVersion(/(MeituanGroup)\/([\d\.]+)/i);
	            version = arr[2];
	
	        } else if (/(f=android)|(f=iphone)|(f=ipad)|(f=ios)/g.test(URL)) {
	            if (/(utm_campaign=Agroup)/.test(URL)) {
	                type = 'mtgroup';
	            } else {
	                type = 'mt'
	            }
	            var param = {};
	            try {
	                var query = URL.split('?')[1].split('&');
	                if (query && query.length) {
	                    query.map(function(str) {
	                        var arr = str.split('=');
	                        param[arr[0]] = arr[1];
	                    })
	                }
	            } catch (e) {
	                console.log('parse param failed');
	            }
	            version = param.version_name;
	        } else if (/MicroMessenger/.test(UA)) {
	            type = 'weixin';
	            version = match(/MicroMessenger\/([\d\.]+)/i);
	
	        } else if (/QZONE/.test(UA)) {
	            type = 'qqzone';
	            version = match(/QZONEJSSDK\/([\d\.]+)/);
	
	        } else if (/QQ\/([\d\.]+)/.test(UA)) {
	            type = 'qq';
	            version = match(/QQ\/([\d\.]+)/i);
	
	        } else if (/UCWEB/i.test(UA)) {
	            type = 'ucweb';
	            version = match(/UCWEB([\d\.]+)/i);
	
	        } else {
	            type = 'browser';
	        }
	
	        //区分业务：点评OR美团
	        if (/\.dianping\.com/i.test(URL)) {
	            source = 'dianping';
	            env = 'product';
	        }else if (/\.51ping\.com/i.test(URL)) {
	            source = 'dianping';
	            env = 'beta';
	        }else if (/test\.([\w\.]+)meituan\.com/i.test(URL)) {
	            source = 'meituan';
	            env = 'beta';
	        }else if (/\.meituan\.com/i.test(URL)) {
	            source = 'meituan';
	            env = 'product';
	        }
	
	        result.type = type;
	        result.version = version;
	        result.source = source;
	        result.env = env;
	
	        return result;
	    } catch (e) {
	        console.log(e);
	        result.type = type;
	        result.version = version;
	
	        return result;
	    }
	};
	module.exports = getUA;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
	    factory(exports, module);
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod.exports, mod);
	    global.fetchJsonp = mod.exports;
	  }
	})(this, function (exports, module) {
	  'use strict';
	
	  var defaultOptions = {
	    timeout: 5000,
	    jsonpCallback: 'callback',
	    jsonpCallbackFunction: null
	  };
	
	  function generateCallbackFunction() {
	    return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);
	  }
	
	  // Known issue: Will throw 'Uncaught ReferenceError: callback_*** is not defined'
	  // error if request timeout
	  function clearFunction(functionName) {
	    // IE8 throws an exception when you try to delete a property on window
	    // http://stackoverflow.com/a/1824228/751089
	    try {
	      delete window[functionName];
	    } catch (e) {
	      window[functionName] = undefined;
	    }
	  }
	
	  function removeScript(scriptId) {
	    var script = document.getElementById(scriptId);
	    document.getElementsByTagName('head')[0].removeChild(script);
	  }
	
	  function fetchJsonp(_url) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    // to avoid param reassign
	    var url = _url;
	    var timeout = options.timeout || defaultOptions.timeout;
	    var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;
	
	    var timeoutId = undefined;
	
	    return new Promise(function (resolve, reject) {
	      var callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();
	      var scriptId = jsonpCallback + '_' + callbackFunction;
	
	      window[callbackFunction] = function (response) {
	        resolve({
	          ok: true,
	          // keep consistent with fetch API
	          json: function json() {
	            return Promise.resolve(response);
	          }
	        });
	
	        if (timeoutId) clearTimeout(timeoutId);
	
	        removeScript(scriptId);
	
	        clearFunction(callbackFunction);
	      };
	
	      // Check if the user set their own params, and if not add a ? to start a list of params
	      url += url.indexOf('?') === -1 ? '?' : '&';
	
	      var jsonpScript = document.createElement('script');
	      jsonpScript.setAttribute('src', '' + url + jsonpCallback + '=' + callbackFunction);
	      jsonpScript.id = scriptId;
	      document.getElementsByTagName('head')[0].appendChild(jsonpScript);
	
	      timeoutId = setTimeout(function () {
	        reject(new Error('JSONP request to ' + url + ' timed out'));
	
	        clearFunction(callbackFunction);
	        removeScript(scriptId);
	      }, timeout);
	    });
	  }
	
	  // export as global function
	  /*
	  let local;
	  if (typeof global !== 'undefined') {
	    local = global;
	  } else if (typeof self !== 'undefined') {
	    local = self;
	  } else {
	    try {
	      local = Function('return this')();
	    } catch (e) {
	      throw new Error('polyfill failed because global object is unavailable in this environment');
	    }
	  }
	  local.fetchJsonp = fetchJsonp;
	  */
	
	  module.exports = fetchJsonp;
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _utilMUa = __webpack_require__(65);
	
	var _utilMUa2 = _interopRequireDefault(_utilMUa);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ua = (0, _utilMUa2.default)();
	
	var AJAX_ENUM = [{
		dp: "//promo.dianping.com/list",
		dptest: "//promo.51ping.com/list"
	}, {
		dp: "//promo.dianping.com/mtlist",
		dptest: "//promo.51ping.com/mtlist",
		mt: "//i.meituan.com/mtlist",
		mttest: "//test.i.meituan.com/mtlist"
	}, {
		dp: "//promo.dianping.com/services",
		dptest: "//promo.51ping.com/services",
		mt: "//i.meituan.com/services",
		mttest: "//test.i.meituan.com/services"
	}];
	
	var Ur = module.exports = function (url) {
		return _webUr(url, AJAX_ENUM);
	};
	
	function _webUr(url, enum_arrs) {
		var result = void 0;
	
		enum_arrs.some(function (it) {
			for (var key in it) {
				var value = it[key];
				if (~url.indexOf(value)) {
					var path = url.replace(new RegExp("[^/]*?" + value), "");
	
					var prefix = ua.source == "meituan" ? ~location.host.indexOf("test") ? it["mttest"] : it["mt"] : ua.source == "dianping" ? ~location.host.indexOf("51ping") ? it["dptest"] : it["dp"] : it["dptest"];
					if (prefix) {
						result = prefix + path;
						return true;
					}
				}
			}
			return false;
		});
	
		if (!result) console.log(url + "不存在隐射域名中");
	
		return result || url;
	}
	
	function _appUr(obj) {
		return ua.type == "dpapp" ? obj["dpapp"] : ua.type == "mtgroup" ? obj["mtgroup"] : false;
	}
	
	var SKIP_ENUM = {
		deal: {
			dp: "//m.dianping.com/tuan/deal/{id}",
			dptest: "//m.51ping.com/tuan/deal/{id}",
			mt: "//i.meituan.com/deal/{id}.html",
			mttest: "//test.i.meituan.com/deal/{id}.html",
			dpapp: "dianping://tuandeal?id={id}",
			mtgroup: parseInt((ua.version || "").replace(/\./g, "")) >= 730 ? "imeituan://www.meituan.com/gc/deal/detail?did={id}&channel={channel}" : "imeituan://www.meituan.com/deal?did={id}&channel={channel}"
		},
		shop: {
			dp: "//m.dianping.com/shop/{id}",
			dptest: "//m.51ping.com/shop/{id}",
			mt: "//i.meituan.com/poi/{id}",
			mttest: "//test.i.meituan.com/poi/{id}",
			dpapp: "dianping://shopinfo?shopid={id}&id={id}",
			mtgroup: "imeituan://www.meituan.com/merchant?id={id}&showtype={showtype}"
		}
	};
	
	function _handler(value) {
		return function (opt) {
			var matchStr = _appUr(value) || _webUr(value["dp"], [value]) || false;
	
			for (var k in opt) {
				var v = opt[k];
				matchStr = matchStr.replace(new RegExp("{" + k + "}", "g"), v);
			}
	
			return matchStr.replace(/\&?\{[^\}]+\}/g, "");;
		};
	}
	
	for (var key in SKIP_ENUM) {
		var value = SKIP_ENUM[key];
		Ur[key] = _handler(value);
	}
	
	Ur.methodExtend = function (key, value) {
		if (!Ur[key]) {
			Ur[key] = _handler(value);
		} else {
			console.log(key + "方法已存在");
		}
	};
	
	Ur.AjaxExtend = function (value) {
		AJAX_ENUM.push(value);
	};
	
	function normalize_array(parts) {
		var up = 0;
		var i = parts.length - 1;
		for (; i >= 0; i--) {
			var last = parts[i];
			if (last === '.') {
				parts.splice(i, 1);
			} else if (last === '..') {
				parts.splice(i, 1);
				up++;
			} else if (up) {
				parts.splice(i, 1);
				up--;
			}
		}
	
		while (up--) {
			parts.unshift('..');
		}
	
		return parts;
	}
	
	Ur.resolve = function (from, to) {
		var parts = (from + '/' + to).split('/').filter(Boolean);
		return normalize_array(parts).join('/');
	};

/***/ }
/******/ ]);
//# sourceMappingURL=build.js.map