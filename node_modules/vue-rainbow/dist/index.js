'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _NewUserParamCode;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _fetchJsonp = require('fetch-jsonp');

var _fetchJsonp2 = _interopRequireDefault(_fetchJsonp);

var _utilMUa = require('@dp/util-m-ua');

var _utilMUa2 = _interopRequireDefault(_utilMUa);

var _knb = require('@dp/knb');

var _knb2 = _interopRequireDefault(_knb);

var _geo = require('@dp/geo');

var _geo2 = _interopRequireDefault(_geo);

var _cookieDough = require('cookie-dough');

var _cookieDough2 = _interopRequireDefault(_cookieDough);

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

require('@dp/hippo');

var _rainbowEnums = require('rainbow-enums');

var _urlRewrite = require('@dp/url-rewrite');

var _urlRewrite2 = _interopRequireDefault(_urlRewrite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('es6-promise').polyfill();


var ERROR_MES = "未知错误";
var ERROR_TYPE_MSG = "未知类型";
var MEITUAN = 2;
var DIANPING = 1;

var DrawStatusCode = (0, _defineProperty3.default)({
  "000000": _rainbowEnums.DrawStatus.SUCCESS,
  "110001": _rainbowEnums.DrawStatus.USER_NOT_LOGIN,
  "110002": _rainbowEnums.DrawStatus.USER_STAUS_ABNORMAL,
  "110003": _rainbowEnums.DrawStatus.UNMATCHED_USER,
  "110004": _rainbowEnums.DrawStatus.USER_NOT_EXIST,
  "300001": _rainbowEnums.DrawStatus.INPUT_INVALID_ERROR,
  "300002": _rainbowEnums.DrawStatus.ACTIVITY_NOT_EXIST,
  "300003": _rainbowEnums.DrawStatus.ACTIVITY_NOT_RUNNING,
  "300005": _rainbowEnums.DrawStatus.YOU_HAVE_WIN_ALL_PRIZE,
  "300006": _rainbowEnums.DrawStatus.ACTIVITY_HAS_STOP,
  "300007": _rainbowEnums.DrawStatus.ACTIVITY_HAS_SUSPEND,
  "300008": _rainbowEnums.DrawStatus.HIT_NOTHING,
  "300009": _rainbowEnums.DrawStatus.NOT_ENOUGH_DRAW_COUNT,
  "300010": _rainbowEnums.DrawStatus.NO_PERMISSION,
  "300011": _rainbowEnums.DrawStatus.HIT_PRIZE_AND_DRAW_COUNT_PASS_MAX,
  "300012": _rainbowEnums.DrawStatus.AVAILABLE_PRIZE_STOCK_EMPTY,
  "300013": _rainbowEnums.DrawStatus.NOT_ENOUGH_PRIZE,
  "300014": _rainbowEnums.DrawStatus.ACTIVITY_QUOTA_EMPTY,
  "300015": _rainbowEnums.DrawStatus.SHARE_FOR_ONE_MORE,
  "300020": _rainbowEnums.DrawStatus.NO_PRIZELISE,
  "300016": _rainbowEnums.DrawStatus.NOT_ENOUGH_DAY_DRAW_COUNT,
  "301001": _rainbowEnums.DrawStatus.NOT_OBJECTPRIZE,
  "302001": _rainbowEnums.DrawStatus.LIMIT_KEY_NOT_FOUND
}, '300020', _rainbowEnums.DrawStatus.LIMIT_BY_RATE);

var ShopStatusCode = {
  "000000": _rainbowEnums.ShopStatus.SUCCESS,
  "120001": _rainbowEnums.ShopStatus.ERROR_TOPICID
};

var DrawStatusSuccessCode = {
  4: _rainbowEnums.DrawStatusSuccess.DRAW_NORMAL,
  2: _rainbowEnums.DrawStatusSuccess.DRAW_SHARE_ENABLE,
  0: _rainbowEnums.DrawStatusSuccess.DRAW_TOMORROW,
  1: _rainbowEnums.DrawStatusSuccess.DRAW_LIMITED
};

var DrawEventSuccessCode = {
  1: _rainbowEnums.DrawEventSuccess.DUPLICATED,
  0: _rainbowEnums.DrawEventSuccess.NOT_DUPLICATED
};

var DrawEventSuccessTypeCode = {
  0: _rainbowEnums.DrawEventSuccessType.THANKS,
  1: _rainbowEnums.DrawEventSuccessType.COMBINATION,
  2: _rainbowEnums.DrawEventSuccessType.SINGLETON,
  3: _rainbowEnums.DrawEventSuccessType.COOPERATION,
  4: _rainbowEnums.DrawEventSuccessType.MATERIAL_WITH_ADDRESS,
  5: _rainbowEnums.DrawEventSuccessType.MERCHANT,
  6: _rainbowEnums.DrawEventSuccessType.MATERIAL_WITHOUT_ADDRESS
};

var NewUserParamCode = (_NewUserParamCode = {}, (0, _defineProperty3.default)(_NewUserParamCode, _rainbowEnums.NewUserParam.LIREN, 50), (0, _defineProperty3.default)(_NewUserParamCode, _rainbowEnums.NewUserParam.YULE, 30), (0, _defineProperty3.default)(_NewUserParamCode, _rainbowEnums.NewUserParam.EDU, 75), (0, _defineProperty3.default)(_NewUserParamCode, _rainbowEnums.NewUserParam.QINZI, 100), (0, _defineProperty3.default)(_NewUserParamCode, _rainbowEnums.NewUserParam.KTV, 15), _NewUserParamCode);

var PageViewStatusCode = {
  "000000": _rainbowEnums.PageViewStatus.SUCCESS,
  "100001": _rainbowEnums.PageViewStatus.ILLEGAL_REQUEST_PARAM,
  "999999": _rainbowEnums.PageViewStatus.UNKNOWN
};

var EXPOSE_KEY = "data-exposed";

var COMPONENT_NAME = COMPONENT_NAME || "";

var exposeAction = function exposeAction(DOM, cb) {
  var triggerOnce = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
  var threshold = arguments[3];
  var exposeKey = arguments[4];

  threshold = threshold || 0;
  window.addEventListener('scroll', function () {
    if (DOM.offsetTop - document.body.scrollTop <= window.innerHeight - threshold && !DOM.getAttribute(exposeKey || EXPOSE_KEY) && DOM.offsetHeight > 0) {
      cb && cb();
      triggerOnce && DOM.setAttribute(exposeKey || EXPOSE_KEY, true);
    }
  });
  setTimeout(function () {
    if (DOM.offsetTop - document.body.scrollTop <= window.innerHeight - threshold && !DOM.getAttribute(exposeKey || EXPOSE_KEY) && DOM.offsetHeight > 0) {
      cb && cb();
      triggerOnce && DOM.setAttribute(exposeKey || EXPOSE_KEY, true);
    }
  }, 500);
};

var vueRainbow = {};
vueRainbow.config = {};
vueRainbow.install = function (Vue) {
  var mixin = {
    data: function data() {
      if (this.$parent) {
        return {
          _hippoExtend: {},
          _comName: this.$options.name,
          _lat: 0,
          _lng: 0,
          _cityId: this.determinePlatform() == MEITUAN ? 10 : 1
        };
      }
      return {};
    },
    ready: function ready() {
      var _this = this;

      var self = this;

      if (this.$parent) {
        exposeAction(this.$el, function () {
          _this.track('view', null, _this.$data._hippoExtend);
        });
      } else {
        (0, _geo2.default)(function (config) {
          _this.$data._lng = config.lng || null;
          _this.$data._lat = config.lat || null;
          _this.$data._cityId = config.cityId == '' ? _this.determinePlatform() == MEITUAN ? 10 : 1 : config.cityId;
        }, (0, _utilMUa2.default)().source);
        if (this.$root.config && this.$root.config.topicId) {

          this.reportPageView(this.$root.config.topicId, this.determinePlatform());
        }
      }
    },

    methods: {
      determinePlatform: function determinePlatform(platform) {
        if (!platform) {
          switch ((0, _utilMUa2.default)().source) {
            case 'meituan':
              platform = MEITUAN;
              break;
            default:
              platform = DIANPING;
              break;
          }
        }
        return platform;
      },
      track: function track(action, type, extend) {
        var _this2 = this;

        var target = (typeof extend === 'undefined' ? 'undefined' : (0, _typeof3.default)(extend)) == 'object' ? extend : {};
        if ((0, _utilMUa2.default)().type == "mtgroup" || (0, _utilMUa2.default)().type == "dpapp") {
          _knb2.default.ready(function () {
            _knb2.default.getUserInfo({
              success: function success(user) {
                try {
                  var mvObj = (0, _assign2.default)(target, {
                    "module": _this2.$data._comName || "",
                    abtest: window.__RANDOM__STATUS || "",
                    "action": action,
                    "cartid": user.userId,
                    "type": type,
                    "topicid": _this2.$root && _this2.$root.config.topicId || "",
                    "note": _this2.$root && _this2.$root.config.bu || ""
                  });
                  _hip.push(['mv', mvObj]);
                } catch (e) {
                  console.error(e);
                }
              }
            });
          });
        } else {
          try {
            var mvObj = (0, _assign2.default)(target, {
              "module": this.$data._comName || "",
              abtest: window.__RANDOM__STATUS || "",
              "action": action,
              "cartid": "",
              "type": type,
              "topicid": this.$root && this.$root.config.topicId || "",
              "note": this.$root && this.$root.config.bu || ""
            });
            _hip.push(['mv', mvObj]);
          } catch (e) {
            console.error(e);
          }
        }
      },
      reportPageView: function reportPageView(topicId, platform, userId, uuid) {
        var param = {
          topicId: topicId,
          platform: this.determinePlatform(platform),
          uuid: uuid,
          userId: userId
        };
        var reportUrl = this.determinePlatform(platform) == MEITUAN ? "//promo.dianping.com/mtlist/data/reportPageView.jsonp" : "//promo.dianping.com/list/data/reportPageView.jsonp";
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(reportUrl + "?" + _qs2.default.stringify(param))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        }).then(function (json) {
          switch (json.code) {
            case "200":
              return json.data;
            default:
              throw new Error(ERROR_MES);
          }
        }).then(function (data) {
          if (PageViewStatusCode[data.result] == undefined) {
            throw new Error(ERROR_TYPE_MSG);
          }
          return {
            status: PageViewStatusCode[data.result],
            message: data.resultString
          };
        });
      },
      drawCheck: function drawCheck(eid, platform, token) {
        var params = {
          eid: eid,
          platform: this.determinePlatform(platform),
          token: token
        };

        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/services/drawStatus.jsonp?" + _qs2.default.stringify(params))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        }).then(function (json) {
          switch (json.code) {
            case "200":
              return json.data;
            default:
              throw new Error(ERROR_MES);
          }
        }).then(function (data) {
          if (DrawStatusCode[data.result] == _rainbowEnums.DrawStatus.SUCCESS) {
            var successVal = data.continueDraw << 2 | (data.share && !data.continueDraw) << 1 | (data.maxDrawCounts && !data.share) << 0;
            if (DrawStatusSuccessCode[successVal] == undefined || DrawStatusCode[data.result] == undefined) {
              throw new Error(ERROR_TYPE_MSG);
            }
            return {
              status: DrawStatusCode[data.result],
              message: data.resultString,
              successStatus: DrawStatusSuccessCode[successVal]
            };
          } else {
            if (DrawStatusCode[data.result] == undefined) {
              throw new Error(ERROR_TYPE_MSG);
            }
            return {
              status: DrawStatusCode[data.result],
              message: data.resultString
            };
          }
        });
      },
      getDeal: function getDeal(config, platform) {
        platform = platform || (0, _utilMUa2.default)().source == "meituan" ? MEITUAN : DIANPING;

        if (platform == MEITUAN) {
          return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/mtlist/getDealInfo.jsonp?" + _qs2.default.stringify(config))).then(function (response) {
            try {
              return response.json();
            } catch (e) {
              throw new Error(ERROR_MES);
            }
          });
        } else {
          return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/list/getDealInfo.jsonp?" + _qs2.default.stringify(config))).then(function (response) {
            try {
              return response.json();
            } catch (e) {
              throw new Error(ERROR_MES);
            }
          });
        }
      },
      getShop: function getShop(config, platform) {
        platform = platform || (0, _utilMUa2.default)().source == "meituan" ? MEITUAN : DIANPING;

        if (platform == MEITUAN) {
          return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/mtlist/getShops.jsonp?" + _qs2.default.stringify(config))).then(function (response) {
            try {
              return response.json();
            } catch (e) {
              throw new Error(ERROR_MES);
            }
          }).then(function (json) {
            switch (json.code) {
              case "200":
                return json.data;
              default:
                throw new Error(ERROR_MES);
            }
          }).then(function (data) {
            if (ShopStatusCode[data.result] == _rainbowEnums.ShopStatus.SUCCESS) {
              return {
                data: data.shopRecords,
                status: ShopStatusCode[data.result],
                message: data.resultString
              };
            } else if (ShopStatusCode[data.result] == _rainbowEnums.ShopStatus.ERROR_TOPICID) {
              return {
                status: _rainbowEnums.ShopStatus[data.result],
                message: data.resultString,
                data: []
              };
            } else {
              throw new Error(ERROR_TYPE_MSG);
            }
          });
        } else {
          return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/list/getShops.jsonp?" + _qs2.default.stringify(config))).then(function (response) {
            try {
              return response.json();
            } catch (e) {
              throw new Error(ERROR_MES);
            }
          }).then(function (json) {
            return {
              data: json.productList || [],
              status: 200
            };
          });
        }
      },
      draw: function draw(eid, platform, dpid, cx, token, score) {
        var _this3 = this;

        return new _promise2.default(function (resolve, reject) {
          var params = {
            eid: eid,
            platform: _this3.determinePlatform(platform),
            token: token,
            cityId: _this3.$data._cityId,
            score: score
          };
          if ((0, _utilMUa2.default)().type == "mtgroup" || (0, _utilMUa2.default)().type == "dpapp") {
            _knb2.default.ready(function () {
              _promise2.default.all([_knb2.default.getPromiseInstance().getUserInfo(), _knb2.default.getPromiseInstance().getFingerprint()]).then(function (data) {
                var fp = cx ? cx : data[1].fingerprint;
                var device = dpid ? dpid : data[0].uuid;
                resolve((0, _assign2.default)(params, { cx: fp, dpid: device }));
              }, function () {
                resolve(params);
              }).catch(function () {
                resolve(params);
              });
            });
          } else {
            resolve(params);
          }
        }).then(function (params) {
          return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/services/drawEvent.jsonp?" + _qs2.default.stringify(params))).then(function (response) {
            try {
              return response.json();
            } catch (e) {
              throw new Error(ERROR_MES);
            }
          }).then(function (json) {
            switch (json.code) {
              case "200":
                return json.data;
              default:
                throw new Error(ERROR_MES);
            }
          }).then(function (data) {
            if (DrawStatusCode[data.result] == _rainbowEnums.DrawStatus.SUCCESS) {

              if (DrawEventSuccessCode[data.isre] == undefined || DrawEventSuccessTypeCode[data.type] == undefined) {
                throw new Error(ERROR_TYPE_MSG);
              }

              return (0, _assign2.default)({
                status: DrawStatusCode[data.result],
                successStatus: DrawEventSuccessCode[data.isre],
                successTypeStatus: _rainbowEnums.DrawEventSuccessType[data.type],
                message: data.resultString
              }, {
                data: data
              });
            } else {
              if (DrawStatusCode[data.result] == undefined) {
                throw new Error(ERROR_TYPE_MSG);
              }
              return {
                status: DrawStatusCode[data.result],
                message: data.resultString
              };
            }
          });
        });
      },
      shareSuccess: function shareSuccess(eid, platform, dpid, securitycode, token) {
        var params = {
          eid: eid,
          platform: this.determinePlatform(platform),
          securitycode: securitycode || '',
          token: token || '',
          dpid: dpid || '',
          source: (0, _utilMUa2.default)().type
        };
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/services/shareEvent.jsonp?" + _qs2.default.stringify(params))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        }).then(function (json) {
          switch (json.code) {
            case "200":
              return json.data;
            default:
              throw new Error(ERROR_MES);
          }
        }).then(function (data) {
          if (DrawStatusCode[data.result] == undefined) {
            throw new Error(ERROR_TYPE_MSG);
          }
          return {
            status: DrawStatusCode[data.result],
            message: data.resultString
          };
        });
      },
      userNewStatus: function userNewStatus(newUserParam, token) {
        var params = {
          bu: NewUserParamCode[newUserParam],
          token: token || ""
        };

        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)("//promo.dianping.com/services/userNewStatus.jsonp?" + _qs2.default.stringify(params))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        }).then(function (json) {
          switch (json.code) {
            case "200":
              return json.data;
            default:
              throw new Error(ERROR_MES);
          }
        }).then(function (data) {
          if (DrawStatusCode[data.result] == undefined) {
            throw new Error(ERROR_TYPE_MSG);
          }
          return {
            status: DrawStatusCode[data.result],
            message: data.resultString,
            isNewUser: data.new
          };
        });
      },
      getRecommendDeal: function getRecommendDeal(cityId, categoryIdsStr, pageSize, pageNum, longitude, latitude, platform, dpid, token) {
        var params = {
          geoCityId: cityId,
          cityId: cityId,
          categoryIdsStr: categoryIdsStr || "",
          pageSize: pageSize,
          pageNum: pageNum,
          longitude: longitude,
          latitude: latitude,
          dpid: dpid,
          token: token
        };
        var requestUrl = this.determinePlatform(platform) == MEITUAN ? "//i.meituan.com/mtlist/rec/getMtDealList.jsonp" : "//promo.dianping.com/list/rec/getDealList.jsonp";
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(requestUrl + "?" + _qs2.default.stringify(params))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        }).then(function (json) {
          switch (json.code) {
            case "200":
              return json.data;
            default:
              throw new Error(ERROR_MES);
          }
        }).then(function (data) {
          return {
            data: data.records || [],
            status: 200
          };
        });
      },
      getRecord: function getRecord(config, platform) {
        config.platform = platform || (0, _utilMUa2.default)().source == "meituan" ? MEITUAN : DIANPING;
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/mtlist/getRecord.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/list/getRecord.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getBookingScheduleInfo: function getBookingScheduleInfo(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/baby/mobile/bookingschedule/mt/ajax/getbookingscheduleinfo?";
          } else {
            url = "//i.meituan.com/baby/mobile/bookingschedule/mt/ajax/getbookingscheduleinfo?";
          }
        } else {
          if (location.href.indexOf('dianping') > -1) {
            url = "//m.dianping.com/baby/mobile/bookingschedule/ajax/getbookingscheduleinfo?";
          } else {
            url = "//m.51ping.com/baby/mobile/bookingschedule/ajax/getbookingscheduleinfo?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getBookingScheduleDetailInfo: function getBookingScheduleDetailInfo(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/baby/mobile/bookingschedule/mt/ajax/getbookingscheduledetailinfo?";
          } else {
            url = "//i.meituan.com/baby/mobile/bookingschedule/mt/ajax/getbookingscheduledetailinfo?";
          }
        } else {
          if (location.href.indexOf('dianping') > -1) {
            url = "//m.dianping.com/baby/mobile/bookingschedule/ajax/getbookingscheduledetailinfo?";
          } else {
            url = "//m.51ping.com/baby/mobile/bookingschedule/ajax/getbookingscheduledetailinfo?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getBookingGift: function getBookingGift(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/baby/mobile/bookingSchedule/mt/ajax/getbookinggift?";
          } else {
            url = "//i.meituan.com/baby/mobile/bookingSchedule/mt/ajax/getbookinggift?";
          }
        } else {
          if (location.href.indexOf('dianping') > -1) {
            url = "//m.dianping.com/baby/mobile/bookingSchedule/ajax/getbookinggift?";
          } else {
            url = "//m.51ping.com/baby/mobile/bookingSchedule/ajax/getbookinggift?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      bookingPhotoGraphy: function bookingPhotoGraphy(config) {
        var url = "";
        _knb2.default.getUserInfo({
          success: function success(user) {
            config.uuid = user.uuid || '';
          }
        });
        if ((0, _utilMUa2.default)().source == "meituan") {
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/baby/mobile/bookingschedule/mt/ajax/createorder?";
          } else {
            url = "//i.meituan.com/baby/mobile/bookingschedule/mt/ajax/createorder?";
          }
        } else {
          if (location.href.indexOf('dianping') > -1) {
            url = "//m.dianping.com/baby/mobile/bookingschedule/ajax/createorder?";
          } else {
            url = "//m.51ping.com/baby/mobile/bookingschedule/ajax/createorder?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getPrizes: function getPrizes(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/mtlist/getPrizes.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/list/getPrizes.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      register: function register(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/services/register.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/services/register.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getUserRegisterList: function getUserRegisterList(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/services/getUserRegisterList.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/services/getUserRegisterList.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      drawlist: function drawlist(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/services/drawlist.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/services/drawlist.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getrelation: function getrelation(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/services/getrelation.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/services/getrelation.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      note: function note(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          url = "//i.meituan.com/services/note.jsonp?";
        } else {
          config.platform = DIANPING;
          url = "//promo.dianping.com/services/note.jsonp?";
        }
        return (0, _fetchJsonp2.default)((0, _urlRewrite2.default)(url + _qs2.default.stringify(config))).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getMobileNo: function getMobileNo(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          if (location.href.indexOf('test') > -1) {
            url = "//m.51ping.com/baby/mobile/bookingschedule/mt/ajax/mobileno?";
          } else {
            url = "//m.dianping.com/baby/mobile/bookingschedule/mt/ajax/mobileno?";
          }
        } else {
          if (location.href.indexOf('dianping') > -1) {
            url = "//m.dianping.com/baby/mobile/bookingschedule/ajax/mobileno?";
          } else {
            url = "//m.51ping.com/baby/mobile/bookingschedule/ajax/mobileno?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getFreeDineList: function getFreeDineList(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/mtlist/data/getBwcActivity.jsonp?";
          } else {
            url = "//i.meituan.com/mtlist/data/getBwcActivity.jsonp?";
          }
        } else {
          config.platform = DIANPING;
          if (location.href.indexOf('dianping') > -1) {
            url = "//promo.dianping.com/list/data/getBwcActivity.jsonp?";
          } else {
            url = "//promo.51ping.com/list/data/getBwcActivity.jsonp?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      postbuy: function postbuy(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/services/postbuy.jsonp?";
          } else {
            url = "//i.meituan.com/services/postbuy.jsonp?";
          }
        } else {
          config.platform = DIANPING;
          if (location.href.indexOf('dianping') > -1) {
            url = "//promo.dianping.com/services/postbuy.jsonp?";
          } else {
            url = "//promo.51ping.com/services/postbuy.jsonp?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getfriends: function getfriends(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/services/getfriends.jsonp?";
          } else {
            url = "//i.meituan.com/services/getfriends.jsonp?";
          }
        } else {
          config.platform = DIANPING;
          if (location.href.indexOf('dianping') > -1) {
            url = "//promo.dianping.com/services/getfriends.jsonp?";
          } else {
            url = "//promo.51ping.com/services/getfriends.jsonp?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getCourses: function getCourses(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/mtlist/getCourses.jsonp?";
          } else {
            url = "//i.meituan.com/mtlist/getCourses.jsonp?";
          }
        } else {
          config.platform = DIANPING;
          if (location.href.indexOf('dianping') > -1) {
            url = "//promo.dianping.com/list/getCourses.jsonp?";
          } else {
            url = "//promo.51ping.com/list/getCourses.jsonp?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      },
      getBwcActivityNew: function getBwcActivityNew(config) {
        var url = "";
        if ((0, _utilMUa2.default)().source == "meituan") {
          config.platform = MEITUAN;
          if (location.href.indexOf('test') > -1) {
            url = "//test.i.meituan.com/mtlist/data/getBwcActivityNew.jsonp?";
          } else {
            url = "//i.meituan.com/mtlist/data/getBwcActivityNew.jsonp?";
          }
        } else {
          config.platform = DIANPING;
          if (location.href.indexOf('dianping') > -1) {
            url = "//promo.dianping.com/list/data/getBwcActivityNew.jsonp?";
          } else {
            url = "//promo.51ping.com/list/data/getBwcActivityNew.jsonp?";
          }
        }
        return (0, _fetchJsonp2.default)(url + _qs2.default.stringify(config)).then(function (response) {
          try {
            return response.json();
          } catch (e) {
            throw new Error(ERROR_MES);
          }
        });
      }
    },
    props: {
      skin: {
        type: Object,
        default: function _default() {
          return {
            'default': true
          };
        }
      },
      config: {
        type: Object,
        default: function _default() {
          return {};
        },
        coerce: function coerce(v) {
          return typeof v == 'String' ? JSON.parse(v) : v;
        }
      }
    }
  };
  Vue.mixin(mixin);
};
module.exports = vueRainbow;